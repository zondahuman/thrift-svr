package com.abin.lee.thrift.model; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-30")
public class Order implements org.apache.thrift.TBase<Order, Order._Fields>, java.io.Serializable, Cloneable, Comparable<Order> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Order");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CATAGORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("catagoryList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ADDRESS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("addressMap", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField COLOR_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("colorSet", org.apache.thrift.protocol.TType.SET, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderTupleSchemeFactory());
  }

  public long id; // required
  public String name; // required
  public List<Integer> catagoryList; // required
  public Map<Integer,String> addressMap; // required
  public Set<Integer> colorSet; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    CATAGORY_LIST((short)3, "catagoryList"),
    ADDRESS_MAP((short)4, "addressMap"),
    COLOR_SET((short)5, "colorSet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // CATAGORY_LIST
          return CATAGORY_LIST;
        case 4: // ADDRESS_MAP
          return ADDRESS_MAP;
        case 5: // COLOR_SET
          return COLOR_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATAGORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("catagoryList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ADDRESS_MAP, new org.apache.thrift.meta_data.FieldMetaData("addressMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COLOR_SET, new org.apache.thrift.meta_data.FieldMetaData("colorSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Order.class, metaDataMap);
  }

  public Order() {
  }

  public Order(
    long id,
    String name,
    List<Integer> catagoryList,
    Map<Integer,String> addressMap,
    Set<Integer> colorSet)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.catagoryList = catagoryList;
    this.addressMap = addressMap;
    this.colorSet = colorSet;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Order(Order other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCatagoryList()) {
      List<Integer> __this__catagoryList = new ArrayList<Integer>(other.catagoryList);
      this.catagoryList = __this__catagoryList;
    }
    if (other.isSetAddressMap()) {
      Map<Integer,String> __this__addressMap = new HashMap<Integer,String>(other.addressMap);
      this.addressMap = __this__addressMap;
    }
    if (other.isSetColorSet()) {
      Set<Integer> __this__colorSet = new HashSet<Integer>(other.colorSet);
      this.colorSet = __this__colorSet;
    }
  }

  public Order deepCopy() {
    return new Order(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.catagoryList = null;
    this.addressMap = null;
    this.colorSet = null;
  }

  public long getId() {
    return this.id;
  }

  public Order setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Order setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getCatagoryListSize() {
    return (this.catagoryList == null) ? 0 : this.catagoryList.size();
  }

  public java.util.Iterator<Integer> getCatagoryListIterator() {
    return (this.catagoryList == null) ? null : this.catagoryList.iterator();
  }

  public void addToCatagoryList(int elem) {
    if (this.catagoryList == null) {
      this.catagoryList = new ArrayList<Integer>();
    }
    this.catagoryList.add(elem);
  }

  public List<Integer> getCatagoryList() {
    return this.catagoryList;
  }

  public Order setCatagoryList(List<Integer> catagoryList) {
    this.catagoryList = catagoryList;
    return this;
  }

  public void unsetCatagoryList() {
    this.catagoryList = null;
  }

  /** Returns true if field catagoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetCatagoryList() {
    return this.catagoryList != null;
  }

  public void setCatagoryListIsSet(boolean value) {
    if (!value) {
      this.catagoryList = null;
    }
  }

  public int getAddressMapSize() {
    return (this.addressMap == null) ? 0 : this.addressMap.size();
  }

  public void putToAddressMap(int key, String val) {
    if (this.addressMap == null) {
      this.addressMap = new HashMap<Integer,String>();
    }
    this.addressMap.put(key, val);
  }

  public Map<Integer,String> getAddressMap() {
    return this.addressMap;
  }

  public Order setAddressMap(Map<Integer,String> addressMap) {
    this.addressMap = addressMap;
    return this;
  }

  public void unsetAddressMap() {
    this.addressMap = null;
  }

  /** Returns true if field addressMap is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressMap() {
    return this.addressMap != null;
  }

  public void setAddressMapIsSet(boolean value) {
    if (!value) {
      this.addressMap = null;
    }
  }

  public int getColorSetSize() {
    return (this.colorSet == null) ? 0 : this.colorSet.size();
  }

  public java.util.Iterator<Integer> getColorSetIterator() {
    return (this.colorSet == null) ? null : this.colorSet.iterator();
  }

  public void addToColorSet(int elem) {
    if (this.colorSet == null) {
      this.colorSet = new HashSet<Integer>();
    }
    this.colorSet.add(elem);
  }

  public Set<Integer> getColorSet() {
    return this.colorSet;
  }

  public Order setColorSet(Set<Integer> colorSet) {
    this.colorSet = colorSet;
    return this;
  }

  public void unsetColorSet() {
    this.colorSet = null;
  }

  /** Returns true if field colorSet is set (has been assigned a value) and false otherwise */
  public boolean isSetColorSet() {
    return this.colorSet != null;
  }

  public void setColorSetIsSet(boolean value) {
    if (!value) {
      this.colorSet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CATAGORY_LIST:
      if (value == null) {
        unsetCatagoryList();
      } else {
        setCatagoryList((List<Integer>)value);
      }
      break;

    case ADDRESS_MAP:
      if (value == null) {
        unsetAddressMap();
      } else {
        setAddressMap((Map<Integer,String>)value);
      }
      break;

    case COLOR_SET:
      if (value == null) {
        unsetColorSet();
      } else {
        setColorSet((Set<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case CATAGORY_LIST:
      return getCatagoryList();

    case ADDRESS_MAP:
      return getAddressMap();

    case COLOR_SET:
      return getColorSet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case CATAGORY_LIST:
      return isSetCatagoryList();
    case ADDRESS_MAP:
      return isSetAddressMap();
    case COLOR_SET:
      return isSetColorSet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Order)
      return this.equals((Order)that);
    return false;
  }

  public boolean equals(Order that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_catagoryList = true && this.isSetCatagoryList();
    boolean that_present_catagoryList = true && that.isSetCatagoryList();
    if (this_present_catagoryList || that_present_catagoryList) {
      if (!(this_present_catagoryList && that_present_catagoryList))
        return false;
      if (!this.catagoryList.equals(that.catagoryList))
        return false;
    }

    boolean this_present_addressMap = true && this.isSetAddressMap();
    boolean that_present_addressMap = true && that.isSetAddressMap();
    if (this_present_addressMap || that_present_addressMap) {
      if (!(this_present_addressMap && that_present_addressMap))
        return false;
      if (!this.addressMap.equals(that.addressMap))
        return false;
    }

    boolean this_present_colorSet = true && this.isSetColorSet();
    boolean that_present_colorSet = true && that.isSetColorSet();
    if (this_present_colorSet || that_present_colorSet) {
      if (!(this_present_colorSet && that_present_colorSet))
        return false;
      if (!this.colorSet.equals(that.colorSet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_catagoryList = true && (isSetCatagoryList());
    list.add(present_catagoryList);
    if (present_catagoryList)
      list.add(catagoryList);

    boolean present_addressMap = true && (isSetAddressMap());
    list.add(present_addressMap);
    if (present_addressMap)
      list.add(addressMap);

    boolean present_colorSet = true && (isSetColorSet());
    list.add(present_colorSet);
    if (present_colorSet)
      list.add(colorSet);

    return list.hashCode();
  }

  @Override
  public int compareTo(Order other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatagoryList()).compareTo(other.isSetCatagoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatagoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catagoryList, other.catagoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressMap()).compareTo(other.isSetAddressMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressMap, other.addressMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColorSet()).compareTo(other.isSetColorSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColorSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colorSet, other.colorSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Order(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("catagoryList:");
    if (this.catagoryList == null) {
      sb.append("null");
    } else {
      sb.append(this.catagoryList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressMap:");
    if (this.addressMap == null) {
      sb.append("null");
    } else {
      sb.append(this.addressMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("colorSet:");
    if (this.colorSet == null) {
      sb.append("null");
    } else {
      sb.append(this.colorSet);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderStandardSchemeFactory implements SchemeFactory {
    public OrderStandardScheme getScheme() {
      return new OrderStandardScheme();
    }
  }

  private static class OrderStandardScheme extends StandardScheme<Order> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Order struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CATAGORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.catagoryList = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.catagoryList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCatagoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADDRESS_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.addressMap = new HashMap<Integer,String>(2*_map3.size);
                int _key4;
                String _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readI32();
                  _val5 = iprot.readString();
                  struct.addressMap.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setAddressMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLOR_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set7 = iprot.readSetBegin();
                struct.colorSet = new HashSet<Integer>(2*_set7.size);
                int _elem8;
                for (int _i9 = 0; _i9 < _set7.size; ++_i9)
                {
                  _elem8 = iprot.readI32();
                  struct.colorSet.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setColorSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Order struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.catagoryList != null) {
        oprot.writeFieldBegin(CATAGORY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.catagoryList.size()));
          for (int _iter10 : struct.catagoryList)
          {
            oprot.writeI32(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.addressMap != null) {
        oprot.writeFieldBegin(ADDRESS_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.addressMap.size()));
          for (Map.Entry<Integer, String> _iter11 : struct.addressMap.entrySet())
          {
            oprot.writeI32(_iter11.getKey());
            oprot.writeString(_iter11.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.colorSet != null) {
        oprot.writeFieldBegin(COLOR_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.colorSet.size()));
          for (int _iter12 : struct.colorSet)
          {
            oprot.writeI32(_iter12);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderTupleSchemeFactory implements SchemeFactory {
    public OrderTupleScheme getScheme() {
      return new OrderTupleScheme();
    }
  }

  private static class OrderTupleScheme extends TupleScheme<Order> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Order struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCatagoryList()) {
        optionals.set(2);
      }
      if (struct.isSetAddressMap()) {
        optionals.set(3);
      }
      if (struct.isSetColorSet()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCatagoryList()) {
        {
          oprot.writeI32(struct.catagoryList.size());
          for (int _iter13 : struct.catagoryList)
          {
            oprot.writeI32(_iter13);
          }
        }
      }
      if (struct.isSetAddressMap()) {
        {
          oprot.writeI32(struct.addressMap.size());
          for (Map.Entry<Integer, String> _iter14 : struct.addressMap.entrySet())
          {
            oprot.writeI32(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
        }
      }
      if (struct.isSetColorSet()) {
        {
          oprot.writeI32(struct.colorSet.size());
          for (int _iter15 : struct.colorSet)
          {
            oprot.writeI32(_iter15);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Order struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.catagoryList = new ArrayList<Integer>(_list16.size);
          int _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readI32();
            struct.catagoryList.add(_elem17);
          }
        }
        struct.setCatagoryListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.addressMap = new HashMap<Integer,String>(2*_map19.size);
          int _key20;
          String _val21;
          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
          {
            _key20 = iprot.readI32();
            _val21 = iprot.readString();
            struct.addressMap.put(_key20, _val21);
          }
        }
        struct.setAddressMapIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.colorSet = new HashSet<Integer>(2*_set23.size);
          int _elem24;
          for (int _i25 = 0; _i25 < _set23.size; ++_i25)
          {
            _elem24 = iprot.readI32();
            struct.colorSet.add(_elem24);
          }
        }
        struct.setColorSetIsSet(true);
      }
    }
  }

}

